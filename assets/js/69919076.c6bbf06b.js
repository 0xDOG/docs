(self.webpackChunkuniswap=self.webpackChunkuniswap||[]).push([[8061],{2702:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var t=r(2122),o=r(9756),i=(r(7294),r(3905)),s={id:"types",title:"Types"},a=void 0,u={unversionedId:"reference/types",id:"version-1.0.0/reference/types",isDocsHomePage:!1,title:"Types",description:"Below is an exhaustive list of all the external types used in the SDK.",source:"@site/SDK_versioned_docs/version-1.0.0/reference/08-types.md",sourceDirName:"reference",slug:"/reference/types",permalink:"/sdk/1.0.0/reference/types",version:"1.0.0",sidebarPosition:8,frontMatter:{id:"types",title:"Types"},sidebar:"version-V1/sdksidebar",previous:{title:"Constants",permalink:"/sdk/1.0.0/reference/constants"}},d=[],p={toc:d};function c(e){var n=e.components,r=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Below is an exhaustive list of all the external types used in the SDK."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import BigNumber from "bignumber.js";\nimport { ethers } from "ethers";\n\nimport {\n  SUPPORTED_CHAIN_ID,\n  TRADE_TYPE,\n  TRADE_EXACT,\n  FIXED_UNDERFLOW_BEHAVIOR,\n} from "./constants";\n\nexport type BigNumberish = BigNumber | ethers.utils.BigNumber | string | number;\n\n//// types for on-chain, submitted, and normalized data\nexport type ChainIdOrProvider =\n  | SUPPORTED_CHAIN_ID\n  | ethers.providers.AsyncSendable\n  | ethers.providers.Provider;\n\n// type guard for ChainIdOrProvider\nexport function isChainId(\n  chainIdOrProvider: ChainIdOrProvider\n): chainIdOrProvider is SUPPORTED_CHAIN_ID {\n  const chainId: SUPPORTED_CHAIN_ID = chainIdOrProvider as SUPPORTED_CHAIN_ID;\n  return typeof chainId === "number";\n}\n\n// type guard for ChainIdOrProvider\nexport function isLowLevelProvider(\n  chainIdOrProvider: ChainIdOrProvider\n): chainIdOrProvider is ethers.providers.AsyncSendable {\n  if (isChainId(chainIdOrProvider)) {\n    return false;\n  } else {\n    const provider: ethers.providers.AsyncSendable =\n      chainIdOrProvider as ethers.providers.AsyncSendable;\n    return "send" in provider || "sendAsync" in provider;\n  }\n}\n\nexport interface Token {\n  chainId?: SUPPORTED_CHAIN_ID;\n  address?: string;\n  decimals: number;\n}\n\nexport interface TokenAmount {\n  token: Token;\n  amount: BigNumberish;\n}\n\nexport interface TokenAmountNormalized {\n  token: Token;\n  amount: BigNumber;\n}\n\nexport interface TokenReserves {\n  token: Token;\n  exchange?: Token;\n  ethReserve: TokenAmount;\n  tokenReserve: TokenAmount;\n}\n\nexport interface TokenReservesNormalized {\n  token: Token;\n  exchange?: Token;\n  ethReserve: TokenAmountNormalized;\n  tokenReserve: TokenAmountNormalized;\n}\n\nexport interface EthReserves {\n  token: Token;\n}\n\n// type for input data\nexport type OptionalReserves = TokenReserves | EthReserves | undefined;\n\n// type guard for OptionalReserves\nexport function areTokenReserves(\n  reserves: OptionalReserves\n): reserves is TokenReserves {\n  const tokenReserves: TokenReserves = reserves as TokenReserves;\n  return (\n    tokenReserves !== undefined &&\n    tokenReserves.ethReserve !== undefined &&\n    tokenReserves.tokenReserve !== undefined\n  );\n}\n\n// type guard for OptionalReserves\nexport function areETHReserves(\n  reserves: OptionalReserves\n): reserves is EthReserves {\n  const tokenReserves: TokenReserves = reserves as TokenReserves;\n  return (\n    tokenReserves !== undefined &&\n    tokenReserves.ethReserve === undefined &&\n    tokenReserves.tokenReserve === undefined\n  );\n}\n\n// type for output data\nexport type NormalizedReserves = TokenReservesNormalized | EthReserves;\n\n// type guard for NormalizedReserves\nexport function areTokenReservesNormalized(\n  reserves: NormalizedReserves\n): reserves is TokenReservesNormalized {\n  const tokenReservesNormalized: TokenReservesNormalized =\n    reserves as TokenReservesNormalized;\n  return (\n    tokenReservesNormalized.ethReserve !== undefined &&\n    tokenReservesNormalized.tokenReserve !== undefined\n  );\n}\n\n//// types for computed data\nexport interface Rate {\n  rate: BigNumber;\n  rateInverted: BigNumber;\n}\nexport interface MarketDetails {\n  tradeType: TRADE_TYPE;\n  inputReserves: NormalizedReserves;\n  outputReserves: NormalizedReserves;\n  marketRate: Rate;\n}\n\nexport interface TradeDetails {\n  marketDetailsPre: MarketDetails;\n  marketDetailsPost: MarketDetails;\n  tradeType: TRADE_TYPE;\n  tradeExact: TRADE_EXACT;\n  inputAmount: TokenAmountNormalized;\n  outputAmount: TokenAmountNormalized;\n  executionRate: Rate;\n  marketRateSlippage: BigNumber;\n  executionRateSlippage: BigNumber;\n}\n\nexport type MethodArgument = BigNumber | number | string;\n\nexport interface ExecutionDetails {\n  exchangeAddress: string;\n  methodName: string;\n  methodId: string;\n  value: BigNumber;\n  methodArguments: MethodArgument[];\n}\n\n//// types for formatting data\nexport type FlexibleFormat = BigNumber.Format | boolean;\n\n// type guard for FlexibleFormat\nexport function isFormat(\n  flexibleFormat: FlexibleFormat\n): flexibleFormat is BigNumber.Format {\n  const format: BigNumber.Format = flexibleFormat as BigNumber.Format;\n  return typeof format !== "boolean";\n}\n\nexport interface FormatSignificantOptions {\n  significantDigits: number;\n  roundingMode: BigNumber.RoundingMode;\n  forceIntegerSignificance: boolean;\n  format: FlexibleFormat;\n}\n\nexport interface FormatFixedOptions {\n  decimalPlaces: number;\n  roundingMode: BigNumber.RoundingMode;\n  dropTrailingZeros: boolean;\n  underflowBehavior: FIXED_UNDERFLOW_BEHAVIOR;\n  format: FlexibleFormat;\n}\n')))}c.isMDXComponent=!0},3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return p},kt:function(){return m}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=t.createContext({}),d=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=d(e.components);return t.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=d(r),m=o,f=l["".concat(u,".").concat(m)]||l[m]||c[m]||i;return r?t.createElement(f,s(s({ref:n},p),{},{components:r})):t.createElement(f,s({ref:n},p))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=l;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var d=2;d<i;d++)s[d]=r[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"}}]);