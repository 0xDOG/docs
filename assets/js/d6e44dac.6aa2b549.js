(self.webpackChunkuniswap=self.webpackChunkuniswap||[]).push([[4422],{3626:function(t,e,a){"use strict";a.r(e),a.d(e,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return o},default:function(){return m}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),p={},l=void 0,u={unversionedId:"reference/periphery/interfaces/ISwapRouter",id:"version-V3/reference/periphery/interfaces/ISwapRouter",isDocsHomePage:!1,title:"ISwapRouter",description:"Functions for swapping tokens via Uniswap V3",source:"@site/versioned_docs/version-V3/reference/periphery/interfaces/ISwapRouter.md",sourceDirName:"reference/periphery/interfaces",slug:"/reference/periphery/interfaces/ISwapRouter",permalink:"/protocol/reference/periphery/interfaces/ISwapRouter",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/versioned_docs/version-V3/reference/periphery/interfaces/ISwapRouter.md",version:"V3",frontMatter:{},sidebar:"version-V3/mySidebar",previous:{title:"ISelfPermit",permalink:"/protocol/reference/periphery/interfaces/ISelfPermit"},next:{title:"ITickLens",permalink:"/protocol/reference/periphery/interfaces/ITickLens"}},o=[{value:"Parameter Structs",id:"parameter-structs",children:[{value:"ExactInputSingleParams",id:"exactinputsingleparams",children:[]},{value:"ExactInputParams",id:"exactinputparams",children:[]},{value:"ExactOutputSingleParams",id:"exactoutputsingleparams",children:[]},{value:"ExactOutputParams",id:"exactoutputparams",children:[]}]},{value:"Functions",id:"functions",children:[{value:"exactInputSingle",id:"exactinputsingle",children:[]},{value:"exactInput",id:"exactinput",children:[]},{value:"exactOutputSingle",id:"exactoutputsingle",children:[]},{value:"exactOutput",id:"exactoutput",children:[]}]}],s={toc:o};function m(t){var e=t.components,a=(0,r.Z)(t,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Functions for swapping tokens via Uniswap V3"),(0,i.kt)("h2",{id:"parameter-structs"},"Parameter Structs"),(0,i.kt)("h3",{id:"exactinputsingleparams"},"ExactInputSingleParams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n")),(0,i.kt)("h3",{id:"exactinputparams"},"ExactInputParams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"   struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n")),(0,i.kt)("h3",{id:"exactoutputsingleparams"},"ExactOutputSingleParams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n")),(0,i.kt)("h3",{id:"exactoutputparams"},"ExactOutputParams"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"exactinputsingle"},"exactInputSingle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function exactInputSingle(\n    struct ISwapRouter.ExactInputSingleParams params\n  ) external returns (uint256 amountOut)\n")),(0,i.kt)("p",null,"Swaps ",(0,i.kt)("inlineCode",{parentName:"p"},"amountIn")," of one token for as much as possible of another token"),(0,i.kt)("h4",{id:"parameters"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"params")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactInputSingleParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The parameters necessary for the swap, encoded as ",(0,i.kt)("inlineCode",{parentName:"td"},"ExactInputSingleParams")," in calldata")))),(0,i.kt)("h4",{id:"return-values"},"Return Values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"amountOut")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactInputSingleParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The amount of the received token")))),(0,i.kt)("h3",{id:"exactinput"},"exactInput"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function exactInput(\n    struct ISwapRouter.ExactInputParams params\n  ) external returns (uint256 amountOut)\n")),(0,i.kt)("p",null,"Swaps ",(0,i.kt)("inlineCode",{parentName:"p"},"amountIn")," of one token for as much as possible of another along the specified path"),(0,i.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"params")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactInputParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The parameters necessary for the multi-hop swap, encoded as ",(0,i.kt)("inlineCode",{parentName:"td"},"ExactInputParams")," in calldata")))),(0,i.kt)("h4",{id:"return-values-1"},"Return Values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"amountOut")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactInputParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The amount of the received token")))),(0,i.kt)("h3",{id:"exactoutputsingle"},"exactOutputSingle"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function exactOutputSingle(\n    struct ISwapRouter.ExactOutputSingleParams params\n  ) external returns (uint256 amountIn)\n")),(0,i.kt)("p",null,"Swaps as little as possible of one token for ",(0,i.kt)("inlineCode",{parentName:"p"},"amountOut")," of another token"),(0,i.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"params")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactOutputSingleParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The parameters necessary for the swap, encoded as ",(0,i.kt)("inlineCode",{parentName:"td"},"ExactOutputSingleParams")," in calldata")))),(0,i.kt)("h4",{id:"return-values-2"},"Return Values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"amountIn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactOutputSingleParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The amount of the input token")))),(0,i.kt)("h3",{id:"exactoutput"},"exactOutput"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"  function exactOutput(\n    struct ISwapRouter.ExactOutputParams params\n  ) external returns (uint256 amountIn)\n")),(0,i.kt)("p",null,"Swaps as little as possible of one token for ",(0,i.kt)("inlineCode",{parentName:"p"},"amountOut")," of another along the specified path (reversed)"),(0,i.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"params")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactOutputParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The parameters necessary for the multi-hop swap, encoded as ",(0,i.kt)("inlineCode",{parentName:"td"},"ExactOutputParams")," in calldata")))),(0,i.kt)("h4",{id:"return-values-3"},"Return Values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"amountIn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"struct ISwapRouter.ExactOutputParams"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The amount of the input token")))))}m.isMDXComponent=!0},3905:function(t,e,a){"use strict";a.d(e,{Zo:function(){return s},kt:function(){return d}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function p(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var u=n.createContext({}),o=function(t){var e=n.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):p(p({},e),t)),a},s=function(t){var e=o(t.components);return n.createElement(u.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,u=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),c=o(a),d=r,k=c["".concat(u,".").concat(d)]||c[d]||m[d]||i;return a?n.createElement(k,p(p({ref:e},s),{},{components:a})):n.createElement(k,p({ref:e},s))}));function d(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,p=new Array(i);p[0]=c;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l.mdxType="string"==typeof t?t:r,p[1]=l;for(var o=2;o<i;o++)p[o]=a[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"}}]);