(self.webpackChunkuniswap=self.webpackChunkuniswap||[]).push([[6262],{1781:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={id:"using-ethers",title:"Using Ethers.js"},s=void 0,l={unversionedId:"guides/using-ethers",id:"version-3.0.0/guides/using-ethers",isDocsHomePage:!1,title:"Using Ethers.js",description:"This guide will help you install the V3 SDK and ethers.js to query state data from Ethereum.",source:"@site/SDK_versioned_docs/version-3.0.0/guides/02-using-ethers.md",sourceDirName:"guides",slug:"/guides/using-ethers",permalink:"/sdk/guides/using-ethers",version:"3.0.0",sidebarPosition:2,frontMatter:{id:"using-ethers",title:"Using Ethers.js"},sidebar:"version-V3/sdksidebar",previous:{title:"Quick Start",permalink:"/sdk/guides/quick-start"},next:{title:"Creating a Pool Instance",permalink:"/sdk/guides/creating-a-pool"}},c=[{value:"First Steps",id:"first-steps",children:[]},{value:"Importing Ethers and the V3 SDK",id:"importing-ethers-and-the-v3-sdk",children:[]},{value:"Using ethers.js &quot;Contract&quot;",id:"using-ethersjs-contract",children:[]},{value:"Returning Chain Data",id:"returning-chain-data",children:[]},{value:"Calling Our Function",id:"calling-our-function",children:[]},{value:"The Final Script",id:"the-final-script",children:[]}],u={toc:c};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide will help you install the V3 SDK and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},"ethers.js")," to query state data from Ethereum.",(0,o.kt)("br",{parentName:"p"}),"\n","While this tutorial doesn't use the V3 SDK - it will set us up to use it after we get the on-chain data we need."),(0,o.kt)("h2",{id:"first-steps"},"First Steps"),(0,o.kt)("p",null,"For our first step, we're going to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ethers.js")," to return immutable variables from a Uniswap V3 pool contract, and assign those to an interface in our script that can be repeatedly referenced without continually reading state data directly from the EVM."),(0,o.kt)("p",null,"We'll need to make a new directory called ",(0,o.kt)("inlineCode",{parentName:"p"},"example"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"mkdir example\ncd example\n")),(0,o.kt)("p",null,"Then we'll make a new project using Node's ",(0,o.kt)("inlineCode",{parentName:"p"},"npm"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"npm init\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"npm i typescript --save\nnpm i ts-node --save\nnpm i @uniswap/v3-sdk --save\nnpm i @uniswap/sdk-core i --save\nnpm i ethers  --save\n")),(0,o.kt)("p",null,"Depending on your machine configuration, you may also need this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"npm install -D tslib @types/node\n")),(0,o.kt)("h2",{id:"importing-ethers-and-the-v3-sdk"},"Importing Ethers and the V3 SDK"),(0,o.kt)("p",null,"We'll need to import ethers, and set up our environment variables so we can query chain data.\nFor this example, we're using an infura endpoint. If you don't have access to an infura endpoint, you can setup a free account ",(0,o.kt)("a",{parentName:"p",href:"https://infura.io/"},"here"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ethers } from "ethers";\nimport { Pool } from "@uniswap/v3-sdk";\nimport { Address } from "cluster";\n\nconst provider = new ethers.providers.JsonRpcProvider("<YOUR-ENDPOINT-HERE>");\n')),(0,o.kt)("p",null,"The first thing we'll need to do is to tell Ethers where to look for our chain data.",(0,o.kt)("br",{parentName:"p"}),"\n","To do this, we'll create a local variable with the contract address of the V3 pool we're trying to query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const poolAddress = "0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8";\n')),(0,o.kt)("p",null,"Now we'll need the interface for the functions of the pool contract that we'll be calling:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const poolImmutablesAbi = [\n  "function factory() external view returns (address)",\n  "function token0() external view returns (address)",\n  "function token1() external view returns (address)",\n  "function fee() external view returns (uint24)",\n  "function tickSpacing() external view returns (int24)",\n  "function maxLiquidityPerTick() external view returns (uint128)",\n];\n')),(0,o.kt)("h2",{id:"using-ethersjs-contract"},'Using ethers.js "Contract"'),(0,o.kt)("p",null,'Once that is setup, we\'ll create a new instance of a "Contract" using ',(0,o.kt)("inlineCode",{parentName:"p"},"ethers.js"),". This isn't a smart contract itself, but rather a local model of one that helps us move data around off-chain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const poolContract = new ethers.Contract(\n  poolAddress,\n  poolImmutablesAbi,\n  provider\n);\n")),(0,o.kt)("p",null,"Now we'll create an interface with all the data we're going to return, each assigned to its appropriate type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Immutables {\n  factory: Address;\n  token0: Address;\n  token1: Address;\n  fee: number;\n  tickSpacing: number;\n  maxLiquidityPerTick: number;\n}\n")),(0,o.kt)("h2",{id:"returning-chain-data"},"Returning Chain Data"),(0,o.kt)("p",null,"Now we're ready to query the EVM using ",(0,o.kt)("inlineCode",{parentName:"p"},"ethers.js")," and assign the returned values to the variables inside of our ",(0,o.kt)("inlineCode",{parentName:"p"},"Immutables")," interface."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"async function getPoolImmutables() {\n  const PoolImmutables: Immutables = {\n    factory: await poolContract.factory(),\n    token0: await poolContract.token0(),\n    token1: await poolContract.token1(),\n    fee: await poolContract.fee(),\n    tickSpacing: await poolContract.tickSpacing(),\n    maxLiquidityPerTick: await poolContract.maxLiquidityPerTick(),\n  };\n  return PoolImmutables;\n}\n")),(0,o.kt)("p",null,"Finally, we can call our function, and print out the returned data in our console:"),(0,o.kt)("h2",{id:"calling-our-function"},"Calling Our Function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"getPoolImmutables().then((result) => {\n  console.log(result);\n});\n")),(0,o.kt)("p",null,"To call our function, we'll navigate to our project directory within our console, and use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npx ts-node example.ts\n")),(0,o.kt)("p",null,"If everything worked correctly, you should see something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"\u279c  example npx ts-node example.ts\n{\n  factory: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  token0: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  token1: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  fee: 3000,\n  tickSpacing: 60,\n  maxLiquidityPerTick: BigNumber {\n    _hex: '0x023746e6a58dcb13d4af821b93f062',\n    _isBigNumber: true\n  }\n}\n")),(0,o.kt)("h2",{id:"the-final-script"},"The Final Script"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ethers } from "ethers";\nimport { Pool } from "@uniswap/v3-sdk";\nimport { Address } from "cluster";\n\nconst provider = new ethers.providers.JsonRpcProvider("<YOUR_ENDPOINT_HERE>");\n\nconst poolAddress = "0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8";\n\nconst poolImmutablesAbi = [\n  "function factory() external view returns (address)",\n  "function token0() external view returns (address)",\n  "function token1() external view returns (address)",\n  "function fee() external view returns (uint24)",\n  "function tickSpacing() external view returns (int24)",\n  "function maxLiquidityPerTick() external view returns (uint128)",\n];\n\nconst poolContract = new ethers.Contract(\n  poolAddress,\n  poolImmutablesAbi,\n  provider\n);\n\ninterface Immutables {\n  factory: Address;\n  token0: Address;\n  token1: Address;\n  fee: number;\n  tickSpacing: number;\n  maxLiquidityPerTick: number;\n}\n\nasync function getPoolImmutables() {\n  const [factory, token0, token1, fee, tickSpacing, maxLiquidityPerTick] =\n    await Promise.all([\n      poolContract.factory(),\n      poolContract.token0(),\n      poolContract.token1(),\n      poolContract.fee(),\n      poolContract.tickSpacing(),\n      poolContract.maxLiquidityPerTick(),\n    ]);\n\n  const immutables: Immutables = {\n    factory,\n    token0,\n    token1,\n    fee,\n    tickSpacing,\n    maxLiquidityPerTick,\n  };\n  return immutables;\n}\n\ngetPoolImmutables().then((result) => {\n  console.log(result);\n});\n')))}p.isMDXComponent=!0},3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);