(self.webpackChunkuniswap=self.webpackChunkuniswap||[]).push([[4153],{7337:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return r},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var i=t(2122),o=t(9756),a=(t(7294),t(3905)),r={id:"mint-a-position",title:"Mint a New Position",sidebar_position:2},u=void 0,s={unversionedId:"guides/providing-liquidity/mint-a-position",id:"version-V3/guides/providing-liquidity/mint-a-position",isDocsHomePage:!1,title:"Mint a New Position",description:"Input Parameters",source:"@site/versioned_docs/version-V3/guides/providing-liquidity/mint-a-new-position.md",sourceDirName:"guides/providing-liquidity",slug:"/guides/providing-liquidity/mint-a-position",permalink:"/protocol/guides/providing-liquidity/mint-a-position",editUrl:"https://github.com/uniswap/uniswap-docs/tree/main/versioned_docs/version-V3/guides/providing-liquidity/mint-a-new-position.md",version:"V3",sidebarPosition:2,frontMatter:{id:"mint-a-position",title:"Mint a New Position",sidebar_position:2},sidebar:"version-V3/mySidebar",previous:{title:"Set Up Your Contract",permalink:"/protocol/guides/providing-liquidity/setting-up"},next:{title:"Collecting Fees",permalink:"/protocol/guides/providing-liquidity/collect-fees"}},l=[{value:"Input Parameters",id:"input-parameters",children:[]},{value:"Calling Mint",id:"calling-mint",children:[]},{value:"Updating The Deposit Mapping And Refunding The Calling Address",id:"updating-the-deposit-mapping-and-refunding-the-calling-address",children:[]},{value:"The Full Example",id:"the-full-example",children:[]}],p={toc:l};function d(n){var e=n.components,t=(0,o.Z)(n,["components"]);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"input-parameters"},"Input Parameters"),(0,a.kt)("p",null,"To mint a new position, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"nonFungiblePositionManager")," and call ",(0,a.kt)("inlineCode",{parentName:"p"},"mint"),"."),(0,a.kt)("p",null,"For the sake of this example, were hard coding the token amounts to be minted. In production, this would be a user-configurable function argument."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"    /// @notice Calls the mint function defined in periphery, mints the same amount of each token. For this example we are providing 1000 DAI and 1000 USDC in liquidity\n    /// @return tokenId The id of the newly minted ERC721\n    /// @return liquidity The amount of liquidity for the position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mintNewPosition()\n        external\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        // For this example, we will provide equal amounts of liquidity in both assets.\n        // Providing liquidity in both assets means liquidity will be earning fees and is considered in-range.\n        uint256 amount0ToMint = 1000;\n        uint256 amount1ToMint = 1000;\n")),(0,a.kt)("h2",{id:"calling-mint"},"Calling Mint"),(0,a.kt)("p",null,"Here we approve the ",(0,a.kt)("inlineCode",{parentName:"p"},"nonfungiblePositionManager")," to use the contracts' tokens, then populate the ",(0,a.kt)("inlineCode",{parentName:"p"},"MintParams")," struct and assign it to a local variable ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," that will be passed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"nonfungiblePositionManager")," when we call ",(0,a.kt)("inlineCode",{parentName:"p"},"mint"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"By using ",(0,a.kt)("inlineCode",{parentName:"p"},"TickMath.MIN_TICK")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"TickMath.MAX_TICK"),", we are providing liquidity across the whole range of the pool. In production you may want to specify a more concentrated position.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We set ",(0,a.kt)("inlineCode",{parentName:"p"},"amount0Min")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"amount1Min")," to zero for the example - but this would be a vulnerability in production. A function calling ",(0,a.kt)("inlineCode",{parentName:"p"},"mint")," with no slippage protection would be vulnerable to a frontrunning attack designed to execute the ",(0,a.kt)("inlineCode",{parentName:"p"},"mint")," call at an inaccurate price.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"For a more secure practice the developer would need to implement a slippage estimation process.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Note that this function will not initialize a pool where one does not yet exist."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"        // Approve the position manager\n        TransferHelper.safeApprove(DAI, address(nonfungiblePositionManager), amount0ToMint);\n        TransferHelper.safeApprove(USDC, address(nonfungiblePositionManager), amount1ToMint);\n\n        INonfungiblePositionManager.MintParams memory params =\n            INonfungiblePositionManager.MintParams({\n                token0: DAI,\n                token1: USDC,\n                fee: poolFee,\n                tickLower: TickMath.MIN_TICK,\n                tickUpper: TickMath.MAX_TICK,\n                amount0Desired: amount0ToMint,\n                amount1Desired: amount1ToMint,\n                amount0Min: 0,\n                amount1Min: 0,\n                recipient: address(this),\n                deadline: block.timestamp\n            });\n\n        // Note that the pool defined by DAI/USDC and fee tier 0.3% must already be created and initialized in order to mint\n        (tokenId, liquidity, amount0, amount1) = nonfungiblePositionManager.mint(params);\n\n")),(0,a.kt)("h2",{id:"updating-the-deposit-mapping-and-refunding-the-calling-address"},"Updating The Deposit Mapping And Refunding The Calling Address"),(0,a.kt)("p",null,"Now we can call the internal function we previously wrote in ",(0,a.kt)("a",{parentName:"p",href:"/protocol/guides/providing-liquidity/setting-up"},"Setting Up Your Contract"),". After that, we can take any liquidity leftover from minting and refund it to ",(0,a.kt)("inlineCode",{parentName:"p"},"msg.sender"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"        // Create a deposit\n        _createDeposit(msg.sender, tokenId);\n\n        // Remove allowance and refund in both assets.\n        if (amount0 < amount0ToMint) {\n            TransferHelper.safeApprove(DAI, address(nonfungiblePositionManager), 0);\n            uint256 refund0 = amount0ToMint - amount0;\n            TransferHelper.safeTransfer(DAI, msg.sender, refund0);\n        }\n\n        if (amount1 < amount1ToMint) {\n            TransferHelper.safeApprove(USDC, address(nonfungiblePositionManager), 0);\n            uint256 refund1 = amount1ToMint - amount1;\n            TransferHelper.safeTransfer(USDC, msg.sender, refund1);\n        }\n    }\n")),(0,a.kt)("h2",{id:"the-full-example"},"The Full Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"    /// @notice Calls the mint function defined in periphery, mints the same amount of each token. For this example we are providing 1000 DAI and 1000 USDC in liquidity\n    /// @return tokenId The id of the newly minted ERC721\n    /// @return liquidity The amount of liquidity for the position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mintNewPosition()\n        external\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        )\n    {\n        // For this example, we will provide equal amounts of liquidity in both assets.\n        // Providing liquidity in both assets means liquidity will be earning fees and is considered in-range.\n        uint256 amount0ToMint = 1000;\n        uint256 amount1ToMint = 1000;\n\n        // Approve the position manager\n        TransferHelper.safeApprove(DAI, address(nonfungiblePositionManager), amount0ToMint);\n        TransferHelper.safeApprove(USDC, address(nonfungiblePositionManager), amount1ToMint);\n\n        INonfungiblePositionManager.MintParams memory params =\n            INonfungiblePositionManager.MintParams({\n                token0: DAI,\n                token1: USDC,\n                fee: poolFee,\n                tickLower: TickMath.MIN_TICK,\n                tickUpper: TickMath.MAX_TICK,\n                amount0Desired: amount0ToMint,\n                amount1Desired: amount1ToMint,\n                amount0Min: 0,\n                amount1Min: 0,\n                recipient: address(this),\n                deadline: block.timestamp\n            });\n\n        // Note that the pool defined by DAI/USDC and fee tier 0.3% must already be created and initialized in order to mint\n        (tokenId, liquidity, amount0, amount1) = nonfungiblePositionManager.mint(params);\n\n        // Create a deposit\n        _createDeposit(msg.sender, tokenId);\n\n        // Remove allowance and refund in both assets.\n        if (amount0 < amount0ToMint) {\n            TransferHelper.safeApprove(DAI, address(nonfungiblePositionManager), 0);\n            uint256 refund0 = amount0ToMint - amount0;\n            TransferHelper.safeTransfer(DAI, msg.sender, refund0);\n        }\n\n        if (amount1 < amount1ToMint) {\n            TransferHelper.safeApprove(USDC, address(nonfungiblePositionManager), 0);\n            uint256 refund1 = amount1ToMint - amount1;\n            TransferHelper.safeTransfer(USDC, msg.sender, refund1);\n        }\n    }\n")))}d.isMDXComponent=!0},3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return p},kt:function(){return c}});var i=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function u(n,e){if(null==n)return{};var t,i,o=function(n,e){if(null==n)return{};var t,i,o={},a=Object.keys(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(i=0;i<a.length;i++)t=a[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=i.createContext({}),l=function(n){var e=i.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},p=function(n){var e=l(n.components);return i.createElement(s.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},m=i.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,s=n.parentName,p=u(n,["components","mdxType","originalType","parentName"]),m=l(t),c=o,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||a;return t?i.createElement(f,r(r({ref:e},p),{},{components:t})):i.createElement(f,r({ref:e},p))}));function c(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,r=new Array(a);r[0]=m;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=n,u.mdxType="string"==typeof n?n:o,r[1]=u;for(var l=2;l<a;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);